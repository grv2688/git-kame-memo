------------------------------------------
■　リモートリポジトリ
------------------------------------------
リモートリポジトリはハイフンで繋ぐ


------------------------------------------------------------------------------------
　■　プロンプトをHackしよう
------------------------------------------------------------------------------------

使用中のシェルを確認する
$ echo $SHELL

シェルを変更する
$ chsh -s /bin/bash

バックアップを取る（あれば）
$ cp ~/.zshrc ~/.zshrc_bk

Oh My zshをインストール
コマンドはoh my zshのホームページから入手
$ sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

oh my zshをアンインストールする方法
$ rm -f ~/.oh-my-zsh
.zshrc_bkを.zshrcに戻す

powerlevel10kをクローンする
powerlevel10kで検索して、GitHubのページからURLを入手
$ git clone https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k

.zshrcを修正する
subl ~/.zshrc
# ZSH_THEME="robbyrussell" <--- コメントアウト
ZSH_THEME="powerlevel10k/powerlevel10k" <--- 追加



------------------------------------------------------------------------------------
■　リポジトリをcloneする
------------------------------------------------------------------------------------

Gitユーザの設定
$ git config --global user.name "comp8oe"
$ git config --global user.email "comp8oe@gmail.com"

Gitユーザの確認
$ git config --global --list

リモートリポからcloneしてローカルリポを作成する
$ git clone 


ローカルリポに紐づいているリモートリポのURLを確認する
$ git remote -v
origin	git@bitbucket.org:comp8oe/sample-repo-bitbucket.git (fetch) 　プルする元？
origin	git@bitbucket.org:comp8oe/sample-repo-bitbucket.git (push)　プッシュする先



------------------------------------------------------------------------------------
■　作業用のブランチを作成する
------------------------------------------------------------------------------------

作業用のブランチを作成

ブランチ一覧を表示する
$ git branch
* master
*はチェックアウトしているブランチを指す

新しいブランチを切る
$ git branch <branch_name>
単語はハイフンでつなぐ

作業するブランチを切り替える
$ git checkout <branch-name>

新しいブランチを作成して、チェックアウトする
$ git checkout -b <branch-name>

pagerを無効にするやり方
$ git config --global --replace-all core.pager "less -F -X"



------------------------------------------------------------------------------------
■　作業内容をStageする
------------------------------------------------------------------------------------

作業状態を確認する
$ git status

README.mdを更新する。
$ git statusすると、以下のような表示になる。（抜粋）
Change not staged for commit:
	modified:    README.md

作業内容をステージに追加する
$ git add <filename>
$ git add . <--- 全てのファイル、フォルダをステージに追加する。
add後に$ git statusすると、表示が変わっている。
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   README.md



------------------------------------------------------------------------------------
■　作業内容をコミットする
------------------------------------------------------------------------------------

$ git commit -m "<commit message>"



------------------------------------------------------------------------------------
■　コミット履歴を見てみよう
------------------------------------------------------------------------------------

$ git log

GitHub/Bitbucketでリモートリポを作成したときにinitial commitが行われる

originは、リモートリポジトリのこと。
origin/mainは、リモートリポのmainブランチを指す。

HEADはチェックアウトしているブランチのこと


------------------------------------------------------------------------------------
■　pullしたpushする
------------------------------------------------------------------------------------

①pushする前に一度リモートリポの内容を反映する(pullする)
$ git pull <remote_ref> <branchname>
<remote_ref>はgit remote -vで確認
origin git@*****:***/***.git (fetch)
origin git@*****:***/***.git (push)
※ ブランチ名に注意！master or main

②リモートリポにローカルリポの内容を反映する(push)
$ git push <remote_ref> <branchname>



------------------------------------------------------------------------------------
■　プルリクエストを作成してマージする
------------------------------------------------------------------------------------
 ①pull requestを作成する。
 ②pull requestを確認する。
 ③pull requestをマージする。
 ④mainブランチにてREADME.mdが更新されていることを確認する。

 リモートリポでマージする場合は、pull requeatというリクエストを出す
 ・リモートリポはチームで共有するリポなので、自由にマージすることはできない。
 ・pull requestは、merge requestだと思えばOK
 ・原則他のメンバーが、自分が出したpull requestを確認してマージする
 ・pull requestは”PR"や”プルリク”と呼ぶことが多い

GitHubの操作
・pull requestsタブをクリック
・New Pull Requestsをクリック
・baseのブランチと、compare(比べる)のブランチをそれぞれ選択する。
・ファイルの差分が表示される。
・問題なければ、Create Pull Requestをクリック
・プルリクのタイトルとコメントを記入し、Create pull requestをクリック
---マージ---
・Pull requestsタブをクリック
・リクエストをクリックする。
・内容をレビュー（確認）
・レビューの仕方は別セクションで説明。基本はFiles Changedで差分を見る。下の方で、差分が確認できる。
・問題が無ければ、ConversationタブをクリックしMerge pull requestをクリックし、Confirm mergeボタンをクリックする



Bitbucketの操作
・リポジトリを選択
・左のメニューからブランチを選択
・featureブランチを選択
・「プルリクエストを作成」ボタンをクリック
・baseになるブランチと、compareのブランチを選択。　※GitHubとは左右が逆な感じ
・Titleと説明を記入
・プルリクエストを作成ボタンをクリック
---マージ---
・プルリクエストをクリック
・対象のリクエストをクリック
・マージボタンをクリック
・マージ


------------------------------------------------------------------------------------
■　pull してローカルリポを更新する
------------------------------------------------------------------------------------

①ローカルリポにて、mainブランチに移動する
②リモートリポのmainブランチの情報をローカルリポのmainブランチにpull
　--> ローカルリポをマージするのではない!!!!!!!!!!!!
③ローカルリポのmainブランチのREADME.mdが更新されていることを確認する。

①$ git checkout master
②$ git pull origin master

・ローカルリポのmainブランチは、リモートリポのmainブランチとできるだけ同期した方が良い。


------------------------------------------------------------------------------------
■　不要なブランチを削除する
------------------------------------------------------------------------------------

ローカルリポとリモートリポのupdate-readmeブランチを削除

$ git branch -d <branch-name>

・mainにマージしていないブランチは削除できない
・強制削除する場合は-dではなく、-Dオプションを用いる

リモートリポは、ブラウザ上で削除
GitHubの場合は、branchをクリックして、削除したいブランチのごみ箱アイコンをクリックする。



----------------------------------------------
■　スクラッチからgitリポジトリを作成する
----------------------------------------------

スクラッチ = 最初から

$ git init <フォルダ名>
$ git init project-from-scratch


----------------------------------------------
■　既存のディレクトリをgitリポジトリにする
----------------------------------------------

gitリポにしたいディレクトリに移動して、git initする

参考
$ rm -rf <フォルダ名>
-rは、フォルダの中のフォルダやファイルも一緒に削除する
-fは、強制削除


----------------------------------------------
 既存ディレクトリをforkする
■　既存のリモートリポジトリから作成する
----------------------------------------------

誰かのリモートリポジトリをコピーして、自分のリモートリポジトリにする＝fork

gitHubにログインする
https://github.com/D-S-Hub/git-practiceにアクセス
forkボタンをクリック
自分のリモートリポジトリのurlを取得する
$ git clone <url>


----------------------------------------------
■　untrack fileを理解する
----------------------------------------------

track = 追跡
Untracked files:　一度もaddしたり、commitしたことが無いファイル
Changes not staged for commit:　既にトラックしているファイルを変更した場合


gitがトラックしているファイルの一覧を表示
$ git ls-files


----------------------------------------------
■　ファイル名の変更をGitで管理する(mv)
----------------------------------------------
$ git mv <filename1> <filename2>
通常のmvコマンドを使うと、削除して、新規追加したことになる。
ファイルの削除をステージングエリアに追加するには$ git add -Aすればok
git mvの方が楽。


----------------------------------------------
■　ファイルの削除をGitで管理する(rm)
----------------------------------------------
$ git rm <filename>
trackされていないファイルは削除できない
ステージングエリアにあるファイルも削除できない。
git rmすると削除したという作業がステージングエリアに残る。


----------------------------------------------
■　コミット履歴を確認する(log)
----------------------------------------------
$ git log
$ git log --oneline
$ git log --graph
$ git log -- <filename>
$ git log --follow
$ git show <commitID>


----------------------------------------------
■　Gitの管理から外す(.gitignore)
----------------------------------------------
・サイズが大きいファイル
・バイナリーファイル（画像、音声、動画など、テキストファイル以外）
・中間ファイル
・パスワードなど外部に知られてはいけない情報を含むファイル
・システムが生成するファイルやキャッシュファイル

https://github.com/github/gitignoreを参照しよう！！！

特定のファイル ---> output.log
ワイルドカード ---> *.csv
フォルダ      ---> logs/


----------------------------------------------
■　今までの作業内容をリモートリポジトリにpushする
----------------------------------------------
$ git pull origin main
$ git push origin main


----------------------------------------------
■　まとめ
----------------------------------------------



------------------------------------------------------------------------------------
■　git-flowとGitHub flow
------------------------------------------------------------------------------------

git-flow
・規模が大きくて複雑
・講師曰く「こんな複雑なフローをちゃんと守って開発しているチームは見たことがない」
・

Github flow
・Github社が実際に使っているワークフロー
・git-flowを簡略化したもの
・本講座のシナリオも概ねGithub flowに沿っている。
・講師曰く「僕が働いているチームでもGitHub flowを使っている。多分現場で一番メジャー。」
・mainブランチと、複数のfeatureブランチ

GitHub flowのポイント
・mainブランチは常にデプロイ可能な状態にする
・featureブランチはmainブランチから作成する
・featureブランチは定期的にpushする
・Pull Requestを使用してマージする。ローカルリポでは基本マージしない。
・mainにマージされたら直ちにデプロイする
